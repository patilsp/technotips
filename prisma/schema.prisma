// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = "mongodb+srv://santoshpatil2526:patilsp9696@cluster0.hpizeoq.mongodb.net/technotips"
}

model User {
  id               String       @id @default(uuid())  @map("_id")
  username         String       @unique
  name             String?
  bio              String?     
  website          String?
  email            String?      @unique
  provider         String
  password         String?
  badge            String?
  bgImage          String?
  profileImage     String?
  createdAt        DateTime     @default(now())
  followersCount    Int         @default(0)
  followingCount    Int         @default(0)
  likeCount         Int         @default(0)
  tweets           Tweet[]
  likes            Like[]
  retweets         Retweet[]
  replies          Reply[]
  bookmarks        Bookmark[]
  messagesSent     Message[]    @relation("sender")
  messagesReceived Message[]    @relation("recipient")
  followers        UserFollow[] @relation("follower")
  following        UserFollow[] @relation("following")
}

model UserFollow {
  id          String   @id @default(uuid())  @map("_id")
  follower    User     @relation("follower", fields: [followerId], references: [id])
  followerId  String
  following   User     @relation("following", fields: [followingId], references: [id])
  followingId String
  createdAt   DateTime @default(now())
}

model Message {
  id          String   @id @default(uuid())  @map("_id")
  sender      User     @relation("sender", fields: [senderId], references: [id])
  senderId    String
  recipient   User     @relation("recipient", fields: [recipientId], references: [id])
  recipientId String
  body        String   
  image       String?
  createdAt   DateTime @default(now())
}

model Tweet {
  id           String     @id @default(uuid())  @map("_id")
  userId       String
  body         String     
  images       String[]
  likeCount    Int        @default(0)
  retweetCount Int        @default(0)
  replyCount   Int        @default(0)
  createdAt    DateTime   @default(now())
  user         User       @relation(fields: [userId], references: [id])
  likes        Like[]
  retweets     Retweet[]
  replies      Reply[]
  Bookmark     Bookmark[]
}

model Retweet {
  id          String   @id @default(uuid())  @map("_id")
  tweetId     String
  userId      String
  retweetDate DateTime @default(now())
  tweet       Tweet    @relation(fields: [tweetId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
}

model Like {
  id       String @id @default(uuid()) @map("_id")
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  tweet     Tweet    @relation(fields: [tweetId], references: [id])
  tweetId   String
  createdAt DateTime @default(now())
}

model Reply {
  id       String @id @default(uuid()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  tweet     Tweet    @relation(fields: [tweetId], references: [id])
  tweetId   String
  body      String   
  images    String[]
  createdAt DateTime @default(now())
}

model Bookmark {
  id     String @id @default(uuid()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  tweet     Tweet    @relation(fields: [tweetId], references: [id])
  tweetId   String
  createdAt DateTime @default(now())
}
